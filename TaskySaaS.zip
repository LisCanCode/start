```zip
TaskySaaS/
├── index.html
├── dashboard.php
├── styles.css
├── scripts.js
├── config.php
├── register.php
├── login.php
├── logout.php
├── add_task.php
├── delete_task.php
├── schema.sql
```

```html
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaskySaaS - Simple Task Manager</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Welcome to TaskySaaS</h1>
        <div class="auth-box">
            <h2>Register</h2>
            <form id="registerForm" action="register.php" method="POST">
                <input type="text" name="username" placeholder="Username" required>
                <input type="password" name="password" placeholder="Password" required>
                <button type="submit">Register</button>
            </form>
            <h2>Login</h2>
            <form id="loginForm" action="login.php" method="POST">
                <input type="text" name="username" placeholder="Username" required>
                <input type="password" name="password" placeholder="Password" required>
                <button type="submit">Login</button>
            </form>
            <p id="message"></p>
        </div>
    </div>
    <script src="scripts.js"></script>
</body>
</html>
```

```php
<!-- dashboard.php -->
<?php
session_start();
if (!isset($_SESSION['user_id'])) {
    header("Location: index.html");
    exit;
}
require 'config.php';
$user_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT * FROM tasks WHERE user_id = ?");
$stmt->execute([$user_id]);
$tasks = $stmt->fetchAll();
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaskySaaS - Dashboard</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>TaskySaaS Dashboard</h1>
        <p>Welcome, <?php echo htmlspecialchars($_SESSION['username']); ?>! <a href="logout.php">Logout</a></p>
        <div class="task-box">
            <h2>Add Task</h2>
            <form id="taskForm" action="add_task.php" method="POST">
                <input type="text" name="task" placeholder="Enter task" required>
                <button type="submit">Add Task</button>
            </form>
            <h2>Your Tasks</h2>
            <ul id="taskList">
                <?php foreach ($tasks as $task): ?>
                    <li>
                        <?php echo htmlspecialchars($task['task']); ?>
                        <a href="delete_task.php?id=<?php echo $task['id']; ?>" onclick="return confirm('Delete this task?')">Delete</a>
                    </li>
                <?php endforeach; ?>
            </ul>
        </div>
    </div>
    <script src="scripts.js"></script>
</body>
</html>
```

```css
/* styles.css */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, sans-serif;
}
body {
    background: #f4f4f9;
    display: flex;
    justify-content: center;
    padding: 20px;
}
.container {
    max-width: 600px;
    width: 100%;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    text-align: center;
}
h1 {
    color: #333;
    margin-bottom: 20px;
}
.auth-box, .task-box {
    margin-top: 20px;
}
h2 {
    color: #555;
    margin: 10px 0;
}
form {
    display: flex;
    flex-direction: column;
    gap: 10px;
}
input {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
}
button {
    padding: 10px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
}
button:hover {
    background: #0056b3;
}
p#message {
    color: #d9534f;
    margin-top: 10px;
}
ul#taskList {
    list-style: none;
    text-align: left;
}
ul#taskList li {
    padding: 10px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
ul#taskList li a {
    color: #d9534f;
    text-decoration: none;
}
ul#taskList li a:hover {
    text-decoration: underline;
}
@media (max-width: 480px) {
    .container {
        padding: 15px;
    }
    input, button {
        font-size: 14px;
    }
}
```

```javascript
/* scripts.js */
document.addEventListener('DOMContentLoaded', () => {
    const registerForm = document.getElementById('registerForm');
    const loginForm = document.getElementById('loginForm');
    const taskForm = document.getElementById('taskForm');
    const message = document.getElementById('message');

    if (registerForm) {
        registerForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const response = await fetch('register.php', {
                method: 'POST',
                body: new FormData(registerForm)
            });
            const result = await response.text();
            message.textContent = result;
        });
    }

    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const response = await fetch('login.php', {
                method: 'POST',
                body: new FormData(loginForm)
            });
            const result = await response.text();
            if (result === 'Login successful') {
                window.location.href = 'dashboard.php';
            } else {
                message.textContent = result;
            }
        });
    }

    if (taskForm) {
        taskForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const response = await fetch('add_task.php', {
                method: 'POST',
                body: new FormData(taskForm)
            });
            const result = await response.text();
            if (result === 'Task added') {
                window.location.reload();
            } else {
                alert(result);
            }
        });
    }
});
```

```php
<!-- config.php -->
<?php
$host = 'localhost'; // Update with your DB host
$dbname = 'taskysaas'; // Update with your DB name
$username = 'root'; // Update with your DB username
$password = ''; // Update with your DB password

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}
?>
```

```php
<!-- register.php -->
<?php
require 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = trim($_POST['username']);
    $password = trim($_POST['password']);

    if (empty($username) || empty($password)) {
        echo "All fields are required";
        exit;
    }

    $stmt = $pdo->prepare("SELECT id FROM users WHERE username = ?");
    $stmt->execute([$username]);
    if ($stmt->fetch()) {
        echo "Username already exists";
        exit;
    }

    $hashed_password = password_hash($password, PASSWORD_DEFAULT);
    $stmt = $pdo->prepare("INSERT INTO users (username, password) VALUES (?, ?)");
    if ($stmt->execute([$username, $hashed_password])) {
        echo "Registration successful";
    } else {
        echo "Registration failed";
    }
}
?>
```

```php
<!-- login.php -->
<?php
session_start();
require 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = trim($_POST['username']);
    $password = trim($_POST['password']);

    if (empty($username) || empty($password)) {
        echo "All fields are required";
        exit;
    }

    $stmt = $pdo->prepare("SELECT id, username, password FROM users WHERE username = ?");
    $stmt->execute([$username]);
    $user = $stmt->fetch();

    if ($user && password_verify($password, $user['password'])) {
        $_SESSION['user_id'] = $user['id'];
        $_SESSION['username'] = $user['username'];
        echo "Login successful";
    } else {
        echo "Invalid username or password";
    }
}
?>
```

```php
<!-- logout.php -->
<?php
session_start();
session_destroy();
header("Location: index.html");
exit;
?>
```

```php
<!-- add_task.php -->
<?php
session_start();
require 'config.php';

if (!isset($_SESSION['user_id'])) {
    echo "Please log in";
    exit;
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $task = trim($_POST['task']);
    $user_id = $_SESSION['user_id'];

    if (empty($task)) {
        echo "Task cannot be empty";
        exit;
    }

    $stmt = $pdo->prepare("INSERT INTO tasks (user_id, task) VALUES (?, ?)");
    if ($stmt->execute([$user_id, $task])) {
        echo "Task added";
    } else {
        echo "Failed to add task";
    }
}
?>
```

```php
<!-- delete_task.php -->
<?php
session_start();
require 'config.php';

if (!isset($_SESSION['user_id'])) {
    header("Location: index.html");
    exit;
}

if (isset($_GET['id'])) {
    $task_id = (int)$_GET['id'];
    $user_id = $_SESSION['user_id'];

    $stmt = $pdo->prepare("DELETE FROM tasks WHERE id = ? AND user_id = ?");
    if ($stmt->execute([$task_id, $user_id])) {
        header("Location: dashboard.php");
        exit;
    } else {
        echo "Failed to delete task";
    }
}
?>
```

```sql
/* schema.sql */
CREATE DATABASE IF NOT EXISTS taskysaas;
USE taskysaas;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL
);

CREATE TABLE tasks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    task VARCHAR(255) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
```